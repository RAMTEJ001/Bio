import java.util.Arrays;

public class implementation {
    public static final int K = 5;
    public static int compa = 0;
    public static int comp = 0;
    public static void insertionSort(int A[], int p, int q) {
    for (int i = p; i < q; i++) {
        int tempVal = A[i + 1];
        int j = i + 1;
        while (j > p && A[j - 1] > tempVal) {
            A[j] = A[j - 1];
            j--;
        }
        A[j] = tempVal;
    }
    int[] temp = Arrays.copyOfRange(A, p, q +1);
    Arrays.stream(temp).forEach(i -> System.out.print(i + " "));
    System.out.println();
}
    public static void merge(int A[], int p, int q, int r) {

        int n1 = q - p + 1;
        int n2 = r - q;
        int[] LA = Arrays.copyOfRange(A, p, q +1);
        int[] RA = Arrays.copyOfRange(A, q+1, r +1);
        int right = 0;
        int left = 0;
        int comp = 0;
        for (int i = p; i < r - p + 1; i++) {
            if (right == n2) {
                A[i] = LA[left];
                left++;
        }   else if (left == n1) {
                A[i] = RA[right];
                right++;
        }   else if (RA[right] > LA[left]) {
                A[i] = LA[left];
                left++;
        }   else {
                A[i] = RA[right];
                right++;
        }
    }
}

    public static void sort(int A[], int p, int r) {
        if (r - p > K) {
            int q = (p + r) / 2;
            sort(A, p, q);
            sort(A, q + 1, r);
         merge(A, p, q, r);
        } else {
            insertionSort(A, p, r);
    }
}

    public static void main(String string[]) {
        int[] A = { 2, 5, 1, 6, 7, 3, 8, 4, 9};
        sort(A, 0, A.length - 1);
        Arrays.stream(A).forEach(i -> System.out.print(i + " "));
        System.out.println(compa);
        System.out.println(comp);
}

}
